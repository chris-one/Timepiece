{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useReducer } from 'react';\nimport { UPDATE_ITEMS, ADD_TO_CART, UPDATE_CART_QUANTITY, REMOVE_FROM_CART, ADD_MULTIPLE_TO_CART, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, CLEAR_CART, TOGGLE_CART } from './actions';\n\n// The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\n    case UPDATE_ITEMS:\n      return {\n        ...state,\n        items: [...action.items]\n      };\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.item]\n      };\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.items]\n      };\n    // Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\n    // If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map(item => {\n          if (action._id === item._id) {\n            item.purchaseQuantity = action.purchaseQuantity;\n          }\n          return item;\n        })\n      };\n\n    // First we iterate through each item in the cart and check to see if the `item._id` matches the `action._id`\n    // If so, we remove it from our cart and set the updated state to a variable called `newState`\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(item => {\n        return item._id !== action._id;\n      });\n\n      // Then we return a copy of state and check to see if the cart is empty.\n      // If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: []\n      };\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen\n      };\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories]\n      };\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory\n      };\n\n    // Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\n    // This saves us from a crash.\n    default:\n      return state;\n  }\n};\nexport function useItemReducer(initialState) {\n  _s();\n  return useReducer(reducer, initialState);\n}\n_s(useItemReducer, \"skVOqNGrFQuDFh+lpttAJ2AZFeA=\");","map":{"version":3,"names":["useReducer","UPDATE_ITEMS","ADD_TO_CART","UPDATE_CART_QUANTITY","REMOVE_FROM_CART","ADD_MULTIPLE_TO_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","CLEAR_CART","TOGGLE_CART","reducer","state","action","type","items","cartOpen","cart","item","map","_id","purchaseQuantity","newState","filter","length","categories","currentCategory","useItemReducer","initialState"],"sources":["/Users/chrishernandez/github/Timepiece/client/src/utils/reducers.js"],"sourcesContent":["import { useReducer } from 'react';\nimport {\n  UPDATE_ITEMS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART,\n} from './actions';\n\n// The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\n    case UPDATE_ITEMS:\n      return {\n        ...state,\n        items: [...action.items],\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.item],\n      };\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.items],\n      };\n    // Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\n    // If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map((item) => {\n          if (action._id === item._id) {\n            item.purchaseQuantity = action.purchaseQuantity;\n          }\n          return item;\n        }),\n      };\n\n    // First we iterate through each item in the cart and check to see if the `item._id` matches the `action._id`\n    // If so, we remove it from our cart and set the updated state to a variable called `newState`\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter((item) => {\n        return item._id !== action._id;\n      });\n\n      // Then we return a copy of state and check to see if the cart is empty.\n      // If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState,\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: [],\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen,\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory,\n      };\n\n    // Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\n    // This saves us from a crash.\n    default:\n      return state;\n  }\n};\n\nexport function useItemReducer(initialState) {\n  return useReducer(reducer, initialState);\n}\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,SACEC,YAAY,EACZC,WAAW,EACXC,oBAAoB,EACpBC,gBAAgB,EAChBC,oBAAoB,EACpBC,iBAAiB,EACjBC,uBAAuB,EACvBC,UAAU,EACVC,WAAW,QACN,WAAW;;AAElB;AACA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;EACxC,QAAQA,MAAM,CAACC,IAAI;IACjB;IACA,KAAKZ,YAAY;MACf,OAAO;QACL,GAAGU,KAAK;QACRG,KAAK,EAAE,CAAC,GAAGF,MAAM,CAACE,KAAK;MACzB,CAAC;IAEH,KAAKZ,WAAW;MACd,OAAO;QACL,GAAGS,KAAK;QACRI,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAE,CAAC,GAAGL,KAAK,CAACK,IAAI,EAAEJ,MAAM,CAACK,IAAI;MACnC,CAAC;IACH,KAAKZ,oBAAoB;MACvB,OAAO;QACL,GAAGM,KAAK;QACRK,IAAI,EAAE,CAAC,GAAGL,KAAK,CAACK,IAAI,EAAE,GAAGJ,MAAM,CAACE,KAAK;MACvC,CAAC;IACH;IACA;IACA,KAAKX,oBAAoB;MACvB,OAAO;QACL,GAAGQ,KAAK;QACRI,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAEL,KAAK,CAACK,IAAI,CAACE,GAAG,CAAED,IAAI,IAAK;UAC7B,IAAIL,MAAM,CAACO,GAAG,KAAKF,IAAI,CAACE,GAAG,EAAE;YAC3BF,IAAI,CAACG,gBAAgB,GAAGR,MAAM,CAACQ,gBAAgB;UACjD;UACA,OAAOH,IAAI;QACb,CAAC;MACH,CAAC;;IAEH;IACA;IACA,KAAKb,gBAAgB;MACnB,IAAIiB,QAAQ,GAAGV,KAAK,CAACK,IAAI,CAACM,MAAM,CAAEL,IAAI,IAAK;QACzC,OAAOA,IAAI,CAACE,GAAG,KAAKP,MAAM,CAACO,GAAG;MAChC,CAAC,CAAC;;MAEF;MACA;MACA,OAAO;QACL,GAAGR,KAAK;QACRI,QAAQ,EAAEM,QAAQ,CAACE,MAAM,GAAG,CAAC;QAC7BP,IAAI,EAAEK;MACR,CAAC;IAEH,KAAKb,UAAU;MACb,OAAO;QACL,GAAGG,KAAK;QACRI,QAAQ,EAAE,KAAK;QACfC,IAAI,EAAE;MACR,CAAC;IAEH,KAAKP,WAAW;MACd,OAAO;QACL,GAAGE,KAAK;QACRI,QAAQ,EAAE,CAACJ,KAAK,CAACI;MACnB,CAAC;IAEH,KAAKT,iBAAiB;MACpB,OAAO;QACL,GAAGK,KAAK;QACRa,UAAU,EAAE,CAAC,GAAGZ,MAAM,CAACY,UAAU;MACnC,CAAC;IAEH,KAAKjB,uBAAuB;MAC1B,OAAO;QACL,GAAGI,KAAK;QACRc,eAAe,EAAEb,MAAM,CAACa;MAC1B,CAAC;;IAEH;IACA;IACA;MACE,OAAOd,KAAK;EAAC;AAEnB,CAAC;AAED,OAAO,SAASe,cAAc,CAACC,YAAY,EAAE;EAAA;EAC3C,OAAO3B,UAAU,CAACU,OAAO,EAAEiB,YAAY,CAAC;AAC1C;AAAC,GAFeD,cAAc"},"metadata":{},"sourceType":"module"}